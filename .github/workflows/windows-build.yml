name: Build & Release

# Trigger on pushes to main
on:
  push:
    branches:
      - main

# Grant Actions the rights to create releases & upload assets
permissions:
  contents: write

jobs:
  build_and_release:
    runs-on: windows-latest

    steps:
      - name: Check out source
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: pip install pyinstaller customtkinter pyserial

      - name: Build Windows EXE
        shell: pwsh
        run: |
          pyinstaller --onefile --windowed --name as511_tool --add-data "views;views" as511_gui.py


      - name: Compute release tag
        id: tag
        shell: pwsh
        run: |
          $t = (Get-Date).ToString('yyyy-MM-dd_HH-mm')
          Write-Output "TAG=$t" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Zip the EXE
        id: zip
        shell: pwsh
        run: |
          $zip = "$Env:TAG.zip"
          Compress-Archive -Path "dist\as511_tool.exe" -DestinationPath $zip -Force
          Write-Output "ZIP=$zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Create Release & Upload ZIP
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const zipPath = process.env.ZIP;
            const data = fs.readFileSync(zipPath);

            // 1. Create the Release
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: process.env.TAG,
              name: process.env.TAG,
              body: `Automated build for ${process.env.TAG}`,
              draft: false,
              prerelease: false
            });

            // 2. Upload the ZIP as an asset
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              name: zipPath,
              data,
              headers: { 'content-type': 'application/zip' }
            });
